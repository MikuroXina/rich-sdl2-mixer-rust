var searchIndex = JSON.parse('{\
"rich_sdl2_mixer_rust":{"doc":"rich-sdl2-mixer-rust","t":[18,3,18,18,18,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,0,11,11,11,11,11,11,11,11,11,11,11,3,3,13,13,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,8,10,10,0,5,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,3,13,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,3,6,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,13,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FLAC","FormatFlag","MIDI","MOD","MP3","Mix","OGG","OPUS","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","chunk","clone","clone_into","cmp","complement","contains","converter","device","difference","drop","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","music","ne","new","not","partial_cmp","remove","rotate","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","version","MixChunk","borrow","borrow_mut","channel","drop","from","from_buf_unchecked","from_file_bytes_unchecked","into","new","set_volume","try_from","try_into","type_id","volume","Channel","ChannelGroup","Infinite","OneShot","Pauser","PlayLoops","PlayOptions","Times","attach","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","detach_all","drop","duration","effect","eq","eq","eq","fade_out","fade_out_all","first_free","fmt","fmt","fmt","from","from","from","from","from","halt","halt_all","into","into","into","into","into","is_empty","is_playing","len","loops","ne","ne","ne","new","newest_playing","oldest_playing","partition","pause","pause","pause_all","play","play_fade_in","playing_chunk","set_volume","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","volume","Effect","EffectAttachExt","attach","detach_all","lib","distance","panning","position","stereo_reverse","MixDevice","MixDeviceBuilder","MixSpec","attach_post_effect","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","channels","channels","chunk_decoders","chunk_size","clone","clone","clone_into","clone_into","default","detach_all_post_effect","drop","fmt","fmt","format","format","frequency","frequency","from","from","from","into","into","into","music_decoders","new","new_channels","playing_channels","query","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","FadingIn","FadingOut","FadingState","MixMusic","None","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","custom","drop","eq","fade_in","fade_out","fading_state","fmt","from","from","halt","into","into","is_playing","music_type","new","pause","pause","play","rewind","set_pos","set_volume","to_owned","try_from","try_from","try_into","try_into","ty","type_id","type_id","volume","with_cmd","MixCustomMusic","MusicCallback","borrow","borrow_mut","drop","from","into","new_and_play","try_from","try_into","type_id","Pauser","borrow","borrow_mut","drop","from","into","try_from","try_into","type_id","Command","Flac","Midi","Mod","Mp3","MusicType","Ogg","Opus","Unknown","Wave","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":["rich_sdl2_mixer_rust","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rich_sdl2_mixer_rust::chunk","","","","","","","","","","","","","","","rich_sdl2_mixer_rust::chunk::channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rich_sdl2_mixer_rust::chunk::channel::effect","","","","","rich_sdl2_mixer_rust::chunk::channel::effect::lib","","","","rich_sdl2_mixer_rust::device","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rich_sdl2_mixer_rust::music","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rich_sdl2_mixer_rust::music::custom","","","","","","","","","","","rich_sdl2_mixer_rust::music::pause","","","","","","","","","rich_sdl2_mixer_rust::music::ty","","","","","","","","","","","","","","","","","","","","",""],"d":["Using flac audio format.","A format flag to use on initializing of <code>Mix</code>.","Using midi format.","Using mod audio format.","Using mpeg-1 audio layer-3 format.","A root SDL2_mixer controller.","Using ogg vorbis audio format.","Using opus audio format.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","Audio sampling buffer controls.","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","A converter between the audio format type and <code>f64</code>.","Audio specifications for SDL2_mixer.","Returns the difference between the flags in <code>self</code> and <code>other</code>…","","Returns an empty set of flags.","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The music control that are suitable to background music.","","Constructs a root controller, or <code>Err</code> if the format is not …","Returns the complement of this set of flags.","","Removes the specified flags in-place.","A rotator of some speaker channels by the room angle.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code>…","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the library version of SDL2_mixer.","A chunk buffer of the audio data.","","","Channels to play a <code>MixChunk</code>.","","","Constructs a chunk from the raw wave buffer bytes.","Constructs a chunk from the wave file bytes.","","Constructs a chunk from the file name, or <code>Err</code> on failure.","Sets the output volume of the chunk. The volume is …","","","","Returns the output volume of the chunk. The volume is in …","A mixing channel for playing a <code>MixChunk</code>.","A channel group, reserving some <code>Channel</code>s.","Playing infinitely.","Playing only once.","A pauser to pause playing audio on the <code>Channel</code>. Unpause …","Loops on playing in <code>PlayOptions</code>.","Options to play a chunk by <code>Channel::play</code>.","Playing the specified number of times.","","","","","","","","","","","","","","","","","","","","The maximum duration of playing in milliseconds. Stopping …","Effect processing for the channel, such as panning, …","","","","Fade out playing on the channel in milliseconds. And …","Fade out all the playing channel in milliseconds. And …","Returns the first free mixing channel if exists.","","","","","","","","","Halts playing on the channel.","Halts all the playing channel.","","","","","","Returns whether the group is empty.","Returns whether the channel is playing.","Returns the numbers of channels in the group.","Loops on playing.","","","","Constructs the new channel group.","Returns the newest playing channel in the group.","Returns the oldest playing channel in the group.","Partitions the group into two groups. The length of first …","Pauses playing on the <code>Channel</code>, or <code>None</code> if it is free.","Pauses playing and returns the <code>Pauser</code>, or <code>None</code> if it is …","Pauses all the playing channels.","Starts to play a chunk.","Starts to play a chunk with fade-in time in milliseconds.","Returns the playing chunk if exists.","Sets the output volume of the channel. The volume is …","","","","","","","","","","","","","","","","","","Returns the output volume of the channel. The volume is …","An effect to process the audio buffer in the channel.","An extension for attaching an effect.","Attaches the effect to the channel.","Detaches all the effect from the channel.","The collection of audio effects.","An effect that controls the volume decaying by the …","An effect that controls the volume balance of left and …","An effect that controls the playing position. <code>angle</code> is …","An effect that reverses channels of left and right.","An audio device built from <code>MixDeviceBuilder</code>.","A builder for <code>MixDevice</code>.","A specification of the <code>MixDevice</code>, returned from …","Attaches the effect to the special, post effect channel.","","","","","","","Opens a <code>MixDevice</code> with a root controller, or <code>Err</code> on …","Changes the numbers of channels.","The numbers of channels of the audio device.","Returns the decoder names for the mix chunk.","Changes the output chunk size. If it is too low, the …","","","","","","Detaches all the effect from the special, post effect …","","","","Changes the audio format.","The output format of the audio device.","Changes the sampling frequencies.","The sampling frequency of the audio device.","","","","","","","Returns the decoder names for the mix music.","Constructs a default builder.","Constructs the channel group.","Returns the numbers of playing channels.","Queries the specification of the audio device.","","","","","","","","","","","","A music is fading in.","A music is fading out.","A fading state of the music.","A music buffer of the audio data.","A music is not fading.","","","","","","","A music made from the custom callback function.","","","Plays the music with fade-in times in milliseconds and …","Halts the music with fade-out in milliseconds.","Returns the fading state of the music.","","","","Halts the music.","","","Returns whether the music is playing.","Returns the type of the music.","Constructs a music from the file, or <code>Err</code> on failure.","Pauser for a <code>MixMusic</code>.","Pauses the music until dropping the <code>Pauser</code>.","Plays the music. If a music is already playing, it …","Rewinds the music to the beginning. Rewinding is valid …","Sets the music position in seconds, or <code>Err</code> on failure.","Sets the volume of the music. The <code>volume</code> is clamped in …","","","","","","Audio formats for <code>super::MixMusic</code>.","","","Returns the volume of the music.","Constructs a music from the file with the custom player …","A custom music made by the callback.","A callback to generate the audio to play.","","","","","","Constructs a custom music and starts immediately.","","","","A pauser to pause playing audio on the [<code>Channel</code>]. Unpause …","","","","","","","","","A player from the command specified by [<code>MixMusic::with_cmd</code>…","A flac format.","A midi format.","A mod format.","A mpeg-1 audio layer-3 format.","A type of audio format supported by [<code>MixMusic</code>].","A ogg vorbis format.","A opus format.","An unknown format.","A wave format.","","","","","","","","","","","",""],"i":[1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,2,1,2,1,0,1,1,1,1,1,0,0,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,0,1,2,1,1,1,0,1,1,1,1,1,1,2,1,2,1,2,1,1,2,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,0,0,4,4,0,0,0,4,5,6,7,4,8,5,6,7,4,8,5,4,8,4,8,4,8,5,7,8,0,4,8,5,5,6,6,4,8,5,6,7,4,8,5,5,6,6,7,4,8,5,6,5,6,8,4,8,5,6,6,6,6,7,5,7,5,5,5,5,4,8,6,7,4,8,5,6,7,4,8,5,6,7,4,8,5,5,0,0,9,9,0,0,0,0,0,0,0,0,10,10,11,12,10,11,12,11,11,12,10,11,11,12,11,12,11,10,10,11,12,11,12,11,12,10,11,12,10,11,12,10,11,10,10,10,11,12,10,11,12,10,11,12,10,11,12,13,13,0,0,13,14,13,14,13,13,13,0,14,13,14,14,14,13,14,13,14,14,13,14,14,14,0,14,14,14,14,14,13,14,13,14,13,0,14,13,14,14,0,0,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,17,17,17,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["formatflag",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["formatflag",3]],[[]],[[["formatflag",3]],["ordering",4]],[[]],[[],["bool",15]],null,null,[[]],[[]],[[]],[[["formatflag",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["formatflag",3]],["bool",15]],[[["formatflag",3]],["result",6]],[[]],[[["formatflag",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],null,[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["sdlversion",3]],null,[[]],[[]],null,[[]],[[]],[[["mixdevice",3]]],[[["mixdevice",3]]],[[]],[[["mixdevice",3],["str",15]],["result",6]],[[["u32",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u32",15]],null,null,null,null,null,null,null,null,[[["effect",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["playloops",4]],[[],["playoptions",3]],[[]],[[]],[[]],[[],["playoptions",3]],[[]],[[]],null,null,[[["playloops",4]],["bool",15]],[[["playoptions",3]],["bool",15]],[[["channel",3]],["bool",15]],[[["u32",15]],["usize",15]],[[["u32",15]],["usize",15]],[[],[["option",4,["channel"]],["channel",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],null,[[["playloops",4]],["bool",15]],[[["playoptions",3]],["bool",15]],[[["channel",3]],["bool",15]],[[["mixdevice",3],["usize",15]]],[[],[["option",4,["channel"]],["channel",3]]],[[],[["option",4,["channel"]],["channel",3]]],[[["usize",15]]],[[["channel",3]],["option",4]],[[],[["pauser",3],["option",4,["pauser"]]]],[[["mixdevice",3]]],[[["playoptions",3],["mixchunk",3]],["result",6]],[[["playoptions",3],["u32",15],["mixchunk",3]],["result",6]],[[],[["option",4,["mixchunk"]],["mixchunk",3]]],[[["u32",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],null,null,[[["effect",6]]],[[]],null,[[["mixdevice",3],["u8",15]],[["effect",6],["result",6,["effect"]]]],[[["mixdevice",3],["u8",15]],[["effect",6],["result",6,["effect"]]]],[[["mixdevice",3],["u8",15],["i16",15]],[["effect",6],["result",6,["effect"]]]],[[["mixdevice",3]],[["effect",6],["result",6,["effect"]]]],null,null,null,[[["effect",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mix",3]],[["result",6,["mixdevice"]],["mixdevice",3]]],[[["u32",15]]],null,[[],[["vec",3,["cow"]],["cow",4,["str"]]]],[[["u32",15]]],[[],["mixdevicebuilder",3]],[[],["mixspec",3]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["audioformat",3]]],null,[[["u32",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["cow"]],["cow",4,["str"]]]],[[]],[[["usize",15]],["channelgroup",3]],[[],["usize",15]],[[],["mixspec",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["fadingstate",4]],[[]],null,[[]],[[["fadingstate",4]],["bool",15]],[[["option",4,["f64"]],["u32",15],["option",4,["u32"]],["f64",15]],["result",6]],[[["u32",15]],["result",6]],[[],["fadingstate",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["musictype",4]],[[["mixdevice",3],["str",15]],["result",6]],null,[[],["pauser",3]],[[["option",4,["u32"]],["u32",15]],["result",6]],[[]],[[["f64",15]],["result",6]],[[["u32",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[["mixdevice",3],["str",15]],["result",6]],null,null,[[]],[[]],[[]],[[]],[[]],[[["mixmusic",3],["musiccallback",6]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["musictype",4]],[[]],[[["musictype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"FormatFlag"],[3,"Mix"],[3,"MixChunk"],[4,"PlayLoops"],[3,"Channel"],[3,"ChannelGroup"],[3,"Pauser"],[3,"PlayOptions"],[8,"EffectAttachExt"],[3,"MixDevice"],[3,"MixDeviceBuilder"],[3,"MixSpec"],[4,"FadingState"],[3,"MixMusic"],[3,"MixCustomMusic"],[3,"Pauser"],[4,"MusicType"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};